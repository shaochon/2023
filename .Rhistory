<<<<<<< Updated upstream
summary(mod)
plot(tc ~ age, data=dat,col='grey')
lines(dat$age,fitted(mod),col="red")
mod <- lm(tc ~  bmi+bSpline(age,knots = c(50),degree=2), data = dat)
mod <- lm(tc ~  bmi+bSpline(age,knots = c(50),degree=2), data = dat)
summary(mod)
summary(stepwise(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3), data = dat))
summary(step_wise(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3), data = dat))
summary(step(lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3), data = dat)))
step(lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3), data = dat))
step(lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3), data = dat,direction='forward'))
step(lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female,degree=3), data = dat,direction='forward'))
model = lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3))
model = lm(tc ~ age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3),data=dat)
step(model,direction='forward')
step_model = step(model,direction='forward')
tidy(step_model)
library(tidyverse)
tidy(step_model)
library(tidyr)
tidy(step_model)
library(broom)
tidy(step_model)
model = lm(tc ~ 1,data=dat)
step_model = step(model,direction='forward',scope = (~age + I(age^2) + bmi + female + I(age^2) * female + age * female + bSpline(age,knots = c(20,35,50),degree=3)))
tidy(step_model)
step_model
step_model$model
AIC(step_model)
summary(lm(tc~I(age^2)+bSpline(age,df=4,degree=3),data=dat))
summary(lm(tc~bSpline(age,df=4,degree=3),data=dat))
summary(lm(tc~bSpline(age,knots = c(20),degree=1),data=dat))
summary(lm(tc~bSpline(age,knots = c(20),degree=1),data=dat))
#Part C
model_quad_spline=lm(tc~age+I(age^2)+bSpline(age,df=4,degree=3),data=dat)
summary(model_quad_spline)
#Part D
anova(model_quad,model_quad_spline)
summary(lm(tc~bmi+age,data=dat))
summary(lm(tc~bmi+age,data=dat))
#Part C
model_quad_spline=lm(tc~age+I(age^2)+bSpline(age,df=4,degree=3),data=dat)
summary(model_quad_spline)
#Part D
anova(model_quad,model_quad_spline)
set.seed(2023-10-1)
n <- 40
bdays <- sample(1:365, size = n, replace = TRUE)
## Hint: use the duplicated function
duplicated(bdays)
## Hint: use the duplicated function
sum(duplicated(bdays))
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE
n= 1000
duplicated(sample(1:365, size = n, replace = TRUE))
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE
n= 1000
sum(duplicated(sample(1:365, size = n, replace = TRUE)))/n
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
B = 1000
replicate(B,(any(sample(1:365, size = n, replace = TRUE))))
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
B = 1000
replicate(B,(any(sample(1:365, size = n, replace = TRUE)))) |> mean()
set.seed(2023-10-1)
n <- 25
bdays <- sample(1:365, size = n, replace = TRUE)
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
B = 1000
replicate(B,(any(sample(1:365, size = n, replace = TRUE)))) |> mean()
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
B = 1000
replicate(B,(any(sample(1:365, size = n, replace = TRUE)))) |> mean()
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
n = 25
B = 1000
replicate(B,(any(sample(1:365, size = n, replace = TRUE)))) |> mean()
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
n = 25
B = 1000
replicate(B,(any(suplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
## Hint: use replicate and remember mean of logicals gives you the proportion of TRUE\
n = 25
B = 1000
replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
## Hint: Use sapply.
sapply(1:50, function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean())
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
sapply(1:50,Pr(n))
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
sapply(1:50,Pr)
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
p <- sapply(1:50,Pr)
as.data.frame(n = 1:50,probability=p)
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
p <- sapply(1:50,Pr)
as.data.frame(n = c(1:50),probability=p)
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
p <- sapply(1:50,Pr)
plot(1:50,p)
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
p <- sapply(1:50,Pr)
plot(1:50,p)
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
sapply(1:50, epr)
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
line(1:50, sapply(1:50, epr),col='blue')
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
line(1:50, sapply(1:50, epr),color='blue')
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
line(1:50, sapply(1:50, epr),col='blue')
## Hint: Use sapply.
Pr <- function(n) replicate(B,(any(duplicated(sample(1:365, size = n, replace = TRUE))))) |> mean()
p <- sapply(1:50,Pr)
plot(1:50,p)
plot(1:50,p)
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
plot(1:50,p)
line(1:50, sapply(1:50, epr),col='blue')
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
plot(1:50,p)
lines(1:50, sapply(1:50, epr),col='blue')
## Hint: use the prod function to multiply a sequence of numbers.
epr <- function(n){
1 - prod(seq(364,365-n+1)/365)
}
plot(1:100,sapply(1:100,Pr) )
lines(1:100, sapply(1:100, epr),col='blue')
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
x
replicate(10, sample(c(-1, 1), size = 1, prob = c(9/19, 10/19)))
sample(c(-1, 1), size = 10, replace = TRUE, prob = c(9/19, 10/19))
x <- rbinom(10, 1, 10/19); x <- x*2 - 1
x <- rbinom(10, 1, 10/19); x <- x*2 - 1
x
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s
=======
round(ttest_ci * 100, 1)
?first
?first
?sd
results <- polls_us_election_2016 |>
filter(state!="U.S." &
!grepl("CD", state) &
enddate >="2016-10-31" &
(grade %in% c("A+","A","A-","B+") | is.na(grade))) |>
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) |>
group_by(state) |>
summarize(avg = mean(spread), sd = sd(spread), n = n()) |>
mutate(state = as.character(state))
one_pollster <- polls_us_election_2016 |>
filter(pollster == "Ipsos" & state == "U.S.") |>
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100)
se <- one_pollster |>
summarize(empirical = sd(spread),
theoretical = 2 * sqrt(mean(spread) * (1 - mean(spread)) /
min(samplesize)))
se
one_pollster |> ggplot(aes(spread)) + geom_histogram(binwidth = 0.01,  color = I("black"))
one_pollster |> ggplot(aes(enddate, spread)) +
geom_point() +
geom_smooth(method = "loess", span = 0.1)
polls_us_election_2016 |>
filter(state == "U.S.") |>
group_by(pollster) |>
filter(n()>=10) |>
ungroup() |>
mutate(spread = rawpoll_clinton/100 - rawpoll_trump/100) |>
ggplot(aes(enddate, spread)) +
geom_smooth(method = "loess", span = 0.1) +
geom_point(aes(color=pollster), show.legend = FALSE, alpha=0.6)
polls_us_election_2016 |>
filter(state == "U.S." & enddate>="2016-07-01") |>
select(enddate, pollster, rawpoll_clinton, rawpoll_trump) |>
rename(Clinton = rawpoll_clinton, Trump = rawpoll_trump) |>
gather(candidate, percentage, -enddate, -pollster) |>
mutate(candidate = factor(candidate, levels = c("Trump","Clinton")))|>
group_by(pollster) |>
filter(n()>=10) |>
ungroup() |>
ggplot(aes(enddate, percentage, color = candidate)) +
geom_point(show.legend = FALSE, alpha=0.4)  +
geom_smooth(method = "loess", span = 0.15) +
scale_y_continuous(limits = c(30,50))
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1),size=6,replace = T,prob = c(0.6,0.4))
sum(s)
})
mean(samples>1)
b <- 10^5
nowins <- replicate(b, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(0.6, 0.4))
sum(x) == 0
})
1 - mean(nowins)
## using math
1 - 0.6^4
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1),size=6,replace = T,prob = c(0.6,0.4))
sum(s)
})
mean(samples==0)
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1),size=6,replace = T,prob = c(0.6,0.4))
sum(s)
})
1-mean(samples==0)
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1), size=7,replace = T,prob = c(0.6,0.4))
sum(s)
})
1-mean(samples==0)
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1), size=7,replace = T,prob = c(0.6,0.4))
sum(s)
})
mean(samples>=0)
n <- 10^3
samples <- replicate(n,{
s <- sample(c(0,1), size=7,replace = T,prob = c(0.6,0.4))
sum(s)
})
mean(samples>=1)
n <- 10^5
samples <- replicate(n,{
s <- sample(c(0,1), size=7,replace = T,prob = c(0.6,0.4))
sum(s)
})
mean(samples>=1)
n <- 10^5
b <- 10^5
nowins <- replicate(b, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(0.6, 0.4))
sum(x) == 0
})
1 - mean(nowins)
samples <- replicate(10^3,{
c = 0
w = 1
while(c<4&w<4){
s <- sample(c(0,1),size=1,replace = T,prob = c(0.5,0.5))
if(s==0){
c=c+1
}else{
w=w+1
}
}
return
return(c==4)
})
mean(samples)
cavswins <- replicate(b, {
x <- sample(c(0, 1), size = 6, replace = TRUE, prob = c(0.5, 0.5))
sum(x) >= 4
})
mean(cavswins)
samples <- replicate(10^5,{
c = 0
w = 1
while(c<4&w<4){
s <- sample(c(0,1),size=1,replace = T,prob = c(0.5,0.5))
if(s==0){
c=c+1
}else{
w=w+1
}
}
return
return(c==4)
})
mean(samples)
cavswins <- replicate(10^5, {
x <- sample(c(0, 1), size = 6, replace = TRUE, prob = c(0.5, 0.5))
sum(x) >= 4
})
mean(cavswins)
winprob <- function(p) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(p, 1 - p))
sum(x) == 0
})
1 - mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
winprob <- function(p) {
nowins <- replicate(10^5, {
x <- sample(c(1, 0), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x >= 4)
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(1, 0), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
winprob <- function(n) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = ceiling(n/2), replace = TRUE, prob = c(0.75, 0.25))
sum(x) == 0
})
1 - mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
winprob <- function(n) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) == ceiling(n/2)
})
1 - mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
winprob <- function(n) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) >= ceiling(n/2)
})
1 - mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
winprob <- function(n) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) >= ceiling(n/2)
})
mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
pnorm(67,mean=64,sd = 3)-pnorm(61,mean=64,sd = 3)
qnorm(0.99,mean = 69,sd=3)
B <- 1000
maxIQ <- replicate(B, {
x <- rnorm(10000, mean = 100, sd = 15)
max(x)
})
hist(maxIQ)
p<-1/19
sample(c(-1,17), size =1, prob = c(1-p,p))
1*18/19+17^2*18/19
18 * sqrt(p * (1-p))
-1*18/19+17*18/19
1*18/19+17^2*18/19 - (-1*18/19+17*18/19)^2
1*18/19+(17^2)*18/19 - (-1*18/19+17*18/19)^2
18 * sqrt(p * (1-p))
n = 1000
x <- sample(c(-1,17), size =n, prob = c(18/19,1/19),replace = T)
p = 1/19
miu = n*p
se = sqrt(n)*sqrt(18*p*(1-p))
pnorm(-miu/se)
1 - pnorm(-mu/se)
n = 1000
x <- sample(c(-1,17), size =n, prob = c(18/19,1/19),replace = T)
p = 1/19
miu = n*p
se = sqrt(n)*sqrt(18*p*(1-p))
1 - pnorm(-mu/se)
set.seed(2023-10-1)
n <- 25
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
n <- 25
B <- 10^5
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
n <- seq(1, 50)
pr <- function(n){
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
}
p <- sapply(n, pr)
plot(n, p)
epr <- function(n){
1 - prod(seq(365, 365 - n + 1)/365)
}
ep <- sapply(n, epr)
plot(n, p)
lines(n, ep, col = "red")
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
replicate(10, sample(c(-1, 1), size = 1, prob = c(9/19, 10/19)))
sample(c(-1, 1), size = 10, replace = TRUE, prob = c(9/19, 10/19))
x <- rbinom(10, 1, 10/19); x <- x*2 - 1
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
>>>>>>> Stashed changes
s <- replicate(10^5,{
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
plot(table(s))
mean(s < 0)
x <- sample(c(-1, 1), size = 10^6, replace = TRUE, prob = c(9/19, 10/19))
mean(x)
sqrt(mean((x - mean(x))^2))
<<<<<<< Updated upstream
n <- 1000
mu <- 1/19
sigma <- 2*sqrt(9/19*10/19)
pnorm(-mu*sqrt(n)/(sigma))
s <- replicate(10^3,{
x <- sample(c(0, 1), size = 5*10^5, replace = TRUE, prob = c(1 - 10^-6, 10^-6))
sum(x)
})
plot(table(s))
n <- (-sigma/mu*qnorm(0.01))^2
n <- (-sigma/mu*qnorm(0.01))^2
n
=======
sd(x)
n <- 1000
mu <- 1/19
sigma <- 2*sqrt(9/19*10/19)
pnorm(-sqrt(n)*mu/sigma)
n <- ceiling((-sigma/mu*qnorm(0.01))^2)
>>>>>>> Stashed changes
## Hint: copy and paste one of the previous Monte Carlo simulations and change n
s <- replicate(10^5,{
x <- sample(c(-1, 1), size = n, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
<<<<<<< Updated upstream
plot(table(s))
## Hint: copy and paste one of the previous Monte Carlo simulations and change n
s <- replicate(10^5,{
x <- sample(c(-1, 1), size = n, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
pnorm(s, mean=mean(s), sd = sqrt((s-mean(s))^2))
s <- replicate(10^3,{
x <- sample(c(0, 1), size = 5*10^5, replace = TRUE, prob = c(1 - 10^-6, 10^-6))
sum(x)
})
plot(table(s))
sapply(0:4, function(x) mean(s==k))
library(tidyverse)
url <- "https://web.archive.org/web/20161108012231/https://www.realclearpolitics.com/epolls/2016/president/us/general_election_trump_vs_clinton-5491.html"
library(rvest)
tab <- read_html(url) |> html_node("table") |> html_table()
tab <- tab |> mutate(Poll = stringr::str_remove(Poll, "\\/.*")) |>
mutate(Poll = case_when(
Poll == "BloombergBloomberg" ~ "Bloomberg",
Poll == "FOX NewsFOX News" ~ "FOX News",
Poll == "MonmouthMonmouth"  ~ "Monmouth",
Poll == "CBS NewsCBS News" ~ "CBS News",
TRUE ~ Poll))
names(tab) <- stringr::str_remove_all(names(tab), "\\s(.*)")
knitr::kable(tab, "html") |>
kableExtra::kable_styling(bootstrap_options = "striped", full_width = FALSE)
set.seed(1)
library(tidyverse)
library(dslabs)
take_poll(25)
?take_poll
N <- 10^seq(1, 5, len = 100)
map_df(c(0.1, 0.25, 0.5), function(p) data.frame(N = N, SE = sqrt(p*(1 - p)/N), p = as.character(p)))  |>
ggplot(aes(N, SE, color = p)) +
geom_line() +
scale_x_continuous(breaks = c(10, 100, 1000, 10000), trans = "log10", labels = scales::comma) +
geom_hline(yintercept = 0.01, lty = 2)
x_hat <- 0.52
se <- sqrt(x_hat*(1 - x_hat)/25)
se
pnorm(0.01/se) - pnorm(-0.01/se)
1.96*se
p <- 0.45
N <- 1000
x <- sample(c(0, 1), size = N, replace = TRUE, prob = c(1 - p, p))
x_hat <- mean(x)
B <- 10000
x_hat <- replicate(B, {
x <- sample(c(0, 1), size = N, replace = TRUE, prob = c(1 - p, p))
mean(x)
})
mean(x_hat)
sd(x_hat)
library(tidyverse)
library(gridExtra)
p1 <- data.frame(x_hat=x_hat) |>
ggplot(aes(x_hat)) +
geom_histogram(binwidth = 0.005, color="black")
p2 <-  data.frame(x_hat=x_hat) |>
ggplot(aes(sample=x_hat)) +
stat_qq(dparams = list(mean=mean(x_hat), sd=sd(x_hat))) +
geom_abline() +
ylab("x_hat") +
xlab("Theoretical normal")
grid.arrange(p1,p2, nrow=1)
p <- 0.45
N <- 1000
x <- sample(c(0, 1), size = N, replace = TRUE, prob = c(1 - p, p))
x_hat <- mean(x)
se_hat <- sqrt(x_hat * (1 - x_hat) / N)
c(x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
x <- sample(c(0, 1), size = N, replace = TRUE, prob = c(1 - p, p))
x_hat <- mean(x)
se_hat <- sqrt(x_hat * (1 - x_hat) / N)
c(x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
z <- qnorm(0.995)
z
pnorm(z) - pnorm(-z)
qnorm(0.975)
N <- 1000
B <- 10000
inside <- replicate(B, {
x <- sample(c(0, 1), size = N, replace = TRUE, prob = c(1 - p, p))
x_hat <- mean(x)
se_hat <- sqrt(x_hat * (1 - x_hat) / N)
between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
})
mean(inside)
set.seed(1)
tab <- replicate(100, {
x <- sample(c(0,1), size = N, replace = TRUE, prob = c(1-p, p))
x_hat <- mean(x)
se_hat <- sqrt(x_hat * (1 - x_hat) / N)
hit <- between(p, x_hat - 1.96 * se_hat, x_hat + 1.96 * se_hat)
c(x_hat, x_hat - 1.96 * se_hat, x_hat + 2 * se_hat, hit)
})
tab <- data.frame(poll=1:ncol(tab), t(tab))
names(tab)<-c("poll", "estimate", "low", "high", "hit")
tab <- mutate(tab, p_inside = ifelse(hit, "Yes", "No") )
ggplot(tab, aes(poll, estimate, ymin=low, ymax=high, col = p_inside)) +
geom_point()+
geom_errorbar() +
coord_flip() +
geom_hline(yintercept = p)
sample(c(-1,17), size =1, prob = c(18/19,1/19))
-1*18/19+17*18/19
sqrt(1*18/19+(17*18)^2/19 - (-1*18/19+17*18/19)^2)
18*sqrt(18/19*1/19)
x <- sample(c(-1,17), size =1000, prob = c(18/19,1/19))
x <- sample(c(-1,17), size =1000, prob = c(18/19,1/19),replace = T)
n = 1000
x <- sample(c(-1,17), size =n, prob = c(18/19,1/19),replace = T)
n*1/19
p = 1/19
n*p
sqrt(n)*sqrt(18*p(1-p))
p = 1/19
n*p
sqrt(n)*sqrt(18*p(1-p))
sqrt(n)*sqrt(18*p*(1-p))
p = 1/19
miu = n*p
se = sqrt(n)*sqrt(18*p*(1-p))
pnorm(-miu/se)
library(dslabs)
heights |> group_by(sex) |>
reframe(qs = quantile(height,seq(1,9,2)/10))
quantile(height,seq(1,9,2)/10)
library(dslabs)
qs <- seq(10,90,20)
heights |> group_by(sex) |>
reframe(quantile = paste0(qs, "%"), value = quantile(height, qs/100)) |>
pivot_wider(names_from = sex) |>
rename(female_percentiles = Female, male_percentiles = Male)
library(dslabs)
qs <- seq(10,90,20)
heights |> group_by(sex) |>
reframe(quantile = paste0(qs, "%"), value = quantile(height, qs/100)) |>
pivot_wider(names_from = sex)
library(dslabs)
qs <- seq(10,90,20)
heights |> group_by(sex) |>
reframe(quantile = paste0(qs, "%"), value = quantile(height, qs/100))
?reframe
?quantile
quantile(heights$height)
library(dslabs)
qs <- seq(10,90,20)
heights |> group_by(sex) |>
reframe(quantile = paste0(qs, "%"), value = quantile(height, qs/100)) |>
pivot_wider(names_from = sex) |>
rename(female_percentiles = Female, male_percentiles = Male)
library(tidyverse)
library(dslabs)
ds_theme_set()
tab <- gapminder |> filter(year == 2010) |> group_by(continent) |> select(continent, population)
tab |> ggplot(aes(x = continent, y = population/10^6)) +
geom_boxplot() +
scale_y_continuous(trans = "log10", breaks = c(1,10,100,1000)) + ylab("Population in millions")
tab
gapminder |> filter(year == 2010) |> group_by(continent)
library(tidyverse)
library(dslabs)
ds_theme_set()
tab <- gapminder |> filter(year == 2010) |> group_by(continent) |> select(continent, population)
tab1 = gapminder |> filter(year == 2010) |> group_by(continent) |> summarise(population = unique(population)[[1]]) |> select(continent, population)
tab == tab1
library(tidyverse)
library(dslabs)
ds_theme_set()
tab <- gapminder |> filter(year == 2010) |> group_by(continent) |> select(continent, population)
tab1 = gapminder |> filter(year == 2010) |> group_by(continent) |> summarise(population = unique(population)[[1]]) |> select(continent, population)
identical(tab,tab1)
tab |> ggplot(aes(x = continent, y = population/10^6)) +
geom_boxplot() +
scale_y_continuous(trans = "log10", breaks = c(1,10,100,1000)) + ylab("Population in millions")
tab1
tab
library(tidyverse)
library(dslabs)
ds_theme_set()
tab <- gapminder |> filter(year == 2010) |> group_by(continent) |> select(continent, population)
tab1 = gapminder |> filter(year == 2010) |> group_by(continent) |> mutate(population = unique(population)[[1]]) |> select(continent, population)
identical(tab,tab1)
tab |> ggplot(aes(x = continent, y = population/10^6)) +
geom_boxplot() +
scale_y_continuous(trans = "log10", breaks = c(1,10,100,1000)) + ylab("Population in millions")
tab
gapminder |> filter(year == 2010)
gapminder |> filter(year == 2010) |> select(continent,population)
gapminder |> filter(year == 2010) |> select(continent,population) |> head()
tab
library(tidyverse)
library(dslabs)
ds_theme_set()
tab <- gapminder |> filter(year == 2010) |> group_by(continent) |> select(continent, population)
tab |> ggplot(aes(x = continent, y = population/10^6)) +
geom_boxplot() +
scale_y_continuous(trans = "log10", breaks = c(1,10,100,1000)) + ylab("Population in millions")
tab |> filter(continent=='Europe')
tab |> filter(continent=='Europe') |> mutate(yes = if(population>14000000,1,0))
tab |> filter(continent=='Europe') |> mutate(yes = ifelse(population>14000000,1,0))
tab |> filter(continent=='Europe') |> mutate(yes = ifelse(population>14000000,1,0)) |> sum(yes)
check = tab |> filter(continent=='Europe') |> mutate(yes = ifelse(population>14000000,1,0))
sum(check$yes)/length(check)
check = tab |> filter(continent=='Europe') |> mutate(yes = ifelse(population>14000000,1,0))
sum(check$yes)/dim(check)[1]
check = tab |> filter(continent=='Europe') |> mutate(yes = ifelse(population<14000000,1,0))
sum(check$yes)/dim(check)[1]
tab|>mutate(log = log10(population))
tab|>mutate(log = log10(population)) |> ggplot(aes(x = continent, y = log)) +
geom_boxplot() +
scale_y_continuous(trans = "log10", breaks = c(1,10,100,1000)) + ylab("Population in millions")
x>=69 & x<=72
sum(x>=69 & x<=72)/length(x)
sum(x>69 & x<=72)/length(x)
mean(x>69 & x<=72)
library(dslabs)
x <- heights$height[heights$sex=="Male"]
x
x>69 & x<=72
(x>69 & x<=72)
sum(x>69 & x<=72)
mean(x>69 & x<=72)
if (exists("murders")) rm(murders)
library(dslabs)
murders$rate <- with(murders, total/population*10^5)
murders[murders$rate < 1,]
seq(6:55,4/7)
seq(from=6, to=55,4/7)
rbinom(10, 1, 10/19)
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro",
"San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
city_temps
city_temps |> mutate(celcius = 5/9*(temp-32))
n = 5
c(1:n)^2
n = 5
(1/c(1:n))^2
n = c(1:200)
plot(n,(1/c(1:n))^2)
n = c(1:200)
plot(n,(1/(1/n)^2)
n = c(1:200)
plot(n,(1/n^(-2))
n = c(1:200)
plot(x=n,y=(1/n^(-2))
(1/n^(-2)
)
n = c(1:200)
plot(x=n,y=n^(-2))
pi^2/6
n = c(1:200)
n^(-2)
n = c(1:200)
sumsum(n^(-2))
n = c(1:200)
cumsum(n^(-2))
n = c(1:200)
plot(n,cumsum(n^(-2)))
n = c(1:200)
plot(n,cumsum(n^(-2)))
vlines(pi^2/6)
n = c(1:200)
plot(n,cumsum(n^(-2)))
vline(pi^2/6)
n = c(1:200)
plot(n,cumsum(n^(-2)))
abline(pi^2/6)
n = c(1:200)
plot(n,cumsum(n^(-2)))
abline(h=pi^2/6)
n = c(1:200)
plot(n,cumsum(n^(-2)))
abline(h=pi^2/6,col='red')
state.abb
state.abb %in% c('MA', 'ME', 'MI', 'MO', 'MU')
!state.abb %in% c('MA', 'ME', 'MI', 'MO', 'MU')
setwd('/Users/shaochong/Desktop/BST210/210Project')
dat = read_csv('test.csv')
setwd('/Users/shaochong/Desktop/BST210/210Project')
dat = read_csv('test.csv')
head(dat)
setwd('/Users/shaochong/Desktop/BST210/210Project')
dat = read_csv('cardio_data_processed.csv')
head(dat)
=======
mean(s < 0)
s <- replicate(10^3,{
x <- sample(c(0, 1), size = 5*10^5, replace = TRUE,
prob = c(1 - 10^-6, 10^-6))
sum(x)
})
plot(table(s))
sapply(0:3, function(k) mean(s == k))
dpois(0:3, 0.5)
p <- 0.04 #default prob
s <- replicate(10^5,{
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1-p))
sum(x)
})
hist(s)
p <- 0.04 #default prob
s <- replicate(10^5,{
p <- 0.04 + runif(1, -0.02, 0.02)
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1 - p))
sum(x)
})
hist(s)
n <- 10^5
b <- 10^5
nowins <- replicate(b, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(0.6, 0.4))
sum(x) == 0
})
1 - mean(nowins)
samples <- replicate(10^5,{
c = 0
w = 1
while(c<4&w<4){
s <- sample(c(0,1),size=1,replace = T,prob = c(0.5,0.5))
if(s==0){
c=c+1
}else{
w=w+1
}
}
return
return(c==4)
})
mean(samples)
cavswins <- replicate(10^5, {
x <- sample(c(0, 1), size = 6, replace = TRUE, prob = c(0.5, 0.5))
sum(x) >= 4
})
mean(cavswins)
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
winprob <- function(n) {
nowins <- replicate(10^5, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) >= ceiling(n/2)
})
mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
pnorm(67,mean=64,sd = 3)-pnorm(61,mean=64,sd = 3)
qnorm(0.99,mean = 69,sd=3)
B <- 1000
maxIQ <- replicate(B, {
x <- rnorm(10000, mean = 100, sd = 15)
max(x)
})
hist(maxIQ)
p<-1/19
sample(c(-1,17), size =1, prob = c(1-p,p))
-1*18/19+17*18/19
18 * sqrt(p * (1-p))
1*18/19+(17^2)*18/19 - (-1*18/19+17*18/19)^2
n = 1000
x <- sample(c(-1,17), size =n, prob = c(18/19,1/19),replace = T)
p = 1/19
miu = n*p
se = sqrt(n)*sqrt(18*p*(1-p))
p
sample(c(-1,17), size =1, prob = c(1-p,p))
1 - pnorm(-mu/se)
-mu/se
n <- 1000
x <- sample(c(-1, 17), size = n, replace = TRUE, prob = c(1-p, p))
sum(x)
n <- 1000
x <- sample(c(-1, 17), size = n, replace = TRUE, prob = c(1-p, p))
sum(x)
n <- 1000
x <- sample(c(-1, 17), size = n, replace = TRUE, prob = c(1-p, p))
sum(x)
n <- 1000
x <- sample(c(-1, 17), size = n, replace = TRUE, prob = c(1-p, p))
sum(x)
p = 1/19
miu = n*p
miu <- -1*18/19+17*18/19
miu_n = n*miu
se = sqrt(n)*sqrt(18*p*(1-p))
1 - pnorm(-mu/se)
1 - pnorm(-miu_n/se)
mu <- n * (-1 * (1-p) + 17*p)
se = sqrt(n)*sqrt(18*p*(1-p))
1 - pnorm(-mu/se)
mu <- n * (-1 * (1-p) + 17*p)
mu
mu <- n * (-1 * (1-p) + 17*p)
mu
mu <- n * (-1 * (1-p) + 17*p)
mu
1 - pnorm(-mu/se)
ss <- replicate(10^4, {
s <- sample(c(-1,17), size =1000, prob = c(1-p,p)
sum(s))})
ss <- replicate(10^4, {
s <- sample(c(-1,17), size =1000, prob = c(1-p,p))
sum(s)
})
ss <- replicate(10^4, {
s <- sample(c(-1,17), size =1000, replace = T, prob = c(1-p,p))
sum(s)
})
mean(ss)
sd(ss)
se = sqrt(n)*sqrt(18*p*(1-p))
se
se = sqrt(n)*sqrt(18*p*(1-p))
se
ss <- replicate(10^4, {
s <- sample(c(-1,17), size =1000, replace = T, prob = c(1-p,p))
sum(s)
})
mean(ss)
sd(ss)
ss <- replicate(10^5, {
s <- sample(c(-1,17), size =1000, replace = T, prob = c(1-p,p))
sum(s)
})
mean(ss)
sd(ss)
S <- replicate(10^6, {
x <- sample(c(-1, 17), size = 1000, replace = TRUE, prob = c(18/19, 1/19))
sum(x)
})
mean(S)
sd(S)
mean(S > 0)
18 * sqrt(p * (1-p))
mu <- n * (-1 * (1-p) + 17*p)
mu
se = sqrt(n)*18 * sqrt(p * (1-p))
se
1 - pnorm(-mu/se)
mean(S > 0)
library(dslabs)
x <- heights |> filter(sex == "Male") |>
pull(height)
population_mean <- mean(x)
population_sd <- sd(x)
mu <- mean(x)
sigma <- sd(x)
# Take a sample of size 50 with replacement
set.seed(0813)  # Setting a seed for reproducibility
sample_x <- sample(x, size = 50, replace = TRUE)
# Calculate the sample mean (x_bar) and sample standard deviation (s)
x_bar <- mean(sample_x)
s <- sd(sample_x)
## mu and sigma gives the true average and spread of all male heights in the population.
## x_bar and s gives the estimated average and spread based on your sample of 50.
x
# Take a sample of size 50 with replacement
set.seed(0813)
sample_x <- sample(x, size = 50, replace = TRUE)
# Calculate the sample mean (x_bar) and sample standard deviation (s)
x_bar <- mean(sample_x)
s <- sd(sample_x)
# Estimate the standard error of the sample mean using s instead of sigma
se_estimate <- s / sqrt(length(sample_x))
# Take a sample of size 50 with replacement
set.seed(0813)
sample_x <- sample(x, size = 50, replace = TRUE)
# Calculate the sample mean (x_bar) and sample standard deviation (s)
x_bar <- mean(sample_x)
s <- sd(sample_x)
# Estimate the standard error of the sample mean using s instead of sigma
s <- s / sqrt(length(sample_x))
x_bar + c(-1,1)*1.96*s
n <- length(sample_x)
t_value <- qt(0.975, n - 1)
se_estimate <- s / sqrt(n)
# Construct the 95% confidence interval for mu
ci_lower <- x_bar - t_value * se_estimate
ci_upper <- x_bar + t_value * se_estimate
c(ci_lower, ci_upper)
# Take a sample of size 50 with replacement
set.seed(0813)
sample_x <- sample(x, size = 50, replace = TRUE)
# Calculate the sample mean (x_bar) and sample standard deviation (s)
x_bar <- mean(sample_x)
s <- sd(sample_x)
# Estimate the standard error of the sample mean using s instead of sigma
se_estimate <- s / sqrt(length(sample_x))
n <- length(sample_x)
t_value <- qt(0.975, n - 1)
se_estimate <- s / sqrt(n)
# Construct the 95% confidence interval for mu
ci_lower <- x_bar - t_value * se_estimate
ci_upper <- x_bar + t_value * se_estimate
c(ci_lower, ci_upper)
>>>>>>> Stashed changes
