mutate(AVG = H/AB) |>
filter(AB > 500) |>
ggplot(aes(AVG)) +
geom_histogram(color = "black", binwidth = .01) +
facet_wrap( ~ yearID)
batting_data <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500)
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
batting_data
filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(avg, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)/sqrt(leng())
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(avg, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE)/sqrt(n()) )
(0.45 - r$avg)/r$sd
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r$avg
r$sd
Batting
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE) )
(0.45 - r$avg)/r$sd
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
sqrt(0.45*0.55/leng(20))
sqrt(0.45*0.55/length(20))
0.45*0.55/length(20)
0.45*0.55/20
sqrt(0.45*0.55/20)
mu = 0.275
xbar = 0.450
sigma = 0.111
tao = 0.027
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * mu  + (1 - B) * xbar
mu = 0.275
xbar = 0.450
sigma = 0.111
tao = 0.027
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * mu  + (1 - B) * xbar
estimated_mu
theta = 0.275
tao = 0.027
xbar = 0.450
sigma = 0.111
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * theta  + (1 - B) * xbar
estimated_mu
se_square = 1 / ((1 / (0.111)^2) + (1 / (0.027)^2))
se_square = 1 / ((1 / (0.111)^2) + (1 / (0.027)^2))
se_square
estimated_mu +(-1,1)*1.96*sqrt(se_square)
estimated_mu +c(-1,1)*1.96*sqrt(se_square)
estimated_mu +c(-1,1)*qt(0.975)*sqrt(se_square)
estimated_mu +c(-1,1)*qt(0.975,19)*sqrt(se_square)
qt(0.975,19)
qt(0.95,19)
qt(0.97%,19)
qt(0.975,19)
sqrt(se_square)
qt(0.975,19)*sqrt(se_square)
factor('a')=='a'
identical
qt(0.975,9)
pt(2.262,9)
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
set.seed(2023-10-1)
n <- 25
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
n <- 25
B <- 10^3
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
n <- seq(1, 50)
pr <- function(n){
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
}
p <- sapply(n, pr)
plot(n, p)
epr <- function(n){
1 - prod(seq(365, 365 - n + 1)/365)
}
ep <- sapply(n, epr)
plot(n, p)
lines(n, ep, col = "red")
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
replicate(10, sample(c(-1, 1), size = 1, prob = c(9/19, 10/19)))
sample(c(-1, 1), size = 10, replace = TRUE, prob = c(9/19, 10/19))
x <- rbinom(10, 1, 10/19); x <- x*2 - 1
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s <- replicate(10^3,{
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
plot(table(s))
mean(s < 0)
x <- sample(c(-1, 1), size = 10^6, replace = TRUE, prob = c(9/19, 10/19))
mean(x)
sqrt(mean((x - mean(x))^2))
sd(x)
n <- 1000
mu <- 1/19
sigma <- 2*sqrt(9/19*10/19)
pnorm(-sqrt(n)*mu/sigma)
n <- ceiling((-sigma/mu*qnorm(0.01))^2)
## Hint: copy and paste one of the previous Monte Carlo simulations and change n
s <- replicate(10^3,{
x <- sample(c(-1, 1), size = n, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
mean(s < 0)
s <- replicate(10^3,{
x <- sample(c(0, 1), size = 5*10^3, replace = TRUE,
prob = c(1 - 10^-6, 10^-6))
sum(x)
})
plot(table(s))
sapply(0:3, function(k) mean(s == k))
dpois(0:3, 0.5)
p <- 0.04 #default prob
s <- replicate(10^3,{
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1-p))
sum(x)
})
hist(s)
p <- 0.04 #default prob
s <- replicate(10^3,{
p <- 0.04 + runif(1, -0.02, 0.02)
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1 - p))
sum(x)
})
hist(s)
n <- 10^3
b <- 10^3
nowins <- replicate(b, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(0.6, 0.4))
sum(x) == 0
})
1 - mean(nowins)
samples <- replicate(10^3,{
c = 0
w = 1
while(c<4&w<4){
s <- sample(c(0,1),size=1,replace = T,prob = c(0.5,0.5))
if(s==0){
c=c+1
}else{
w=w+1
}
}
return
return(c==4)
})
mean(samples)
cavswins <- replicate(10^3, {
x <- sample(c(0, 1), size = 6, replace = TRUE, prob = c(0.5, 0.5))
sum(x) >= 4
})
mean(cavswins)
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob),ylab = 'winprob')
winprob <- function(n) {
nowins <- replicate(10^3, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) >= ceiling(n/2)
})
mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
seq(1,100)
seq(5,0)
seq(5,10)
seq(5,10,2)
seq(5:10)
?what is margin of error, what is standard of error and how they relate to the standard deviation
?setNames
co2
?mutate
head(admissions)
dat |> pivot_wider(names_from = gender,values_from = admitted)
dat <- admissions |> select(-applicants)
dat |> pivot_wider(names_from = gender,values_from = admitted)
admissions |> pivot_longer(c(admitted,applicants))
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(c(gender,name))
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name)
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name) |>
pivot_wider(names_from = name, values_from = value)
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name) |>
pivot_wider()
?anti_join
sample_proportion <- 0.450  # Batting average
sample_size <- 500          # Number of at-bats or tries
confidence_level <- 0.95   # Desired confidence level
z_score <- qnorm((1 + confidence_level) / 2)  # Z-score for the desired confidence
z_score
sd <- sqrt(sample_proportion*(1-sample_proportion)/20)
sd
lower_bound <- sample_proportion-z_score*sd
upper_bound <- sample_proportion+z_score*sd
c(lower_bound,upper_bound)
sqrt(0.45*0.55/20)
sqrt(6*sum(1/(1:10000)^2))
dat <- murders[murders$population > 10^7,]
dat[which.min(dat$rate),]
dat <- subset(murders, murders$population > 10^7)
murders[which.min(murders$rate), ]
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
dat|>
count(Race1, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
dat |>
count(Race, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
count(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
table(dat$Race)
dat$Race
?make_date
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(path)
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file(path,"carbon_emissions.csv "))
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv "))
heights
heights$height
heights$height<72&heights$height>69
mean(heights$height<72&heights$height>69)
murders |> ggplot(aes(population, total)) + geom_label()
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide |>
pivot_longer(1:12) |>
rename(month=name, co2=value)
cel_p <- 0.75
replicate(1000, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
cel_p <- 0.75
sample <- replicate(1000, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
mu  <- 3.5
sigma <- 1
xhat <- replicate(10^5,
{N <- 100
x <- rnorm(N, mu, sigma)
return(mean(x))})
mean(xhat)
sd(xhat)
p = 0.45
N =25
2*sqrt(p*(1-p)/N)
1/(1:5)^2
x <- c(“Maine”, “Chicago”, “Michigan”, “Montana”, “Dakota”)
x <- c("Maine", "Chicago")
x %in% state.name
dat <- murders[murders$population > 10^7,]
dat[which.min(dat$rate),]
dat <- murders[murders$population > 10^5,]
dat[which.min(dat$rate),]
dat
dat <- murders[murders$population > 10^5,] |> mutate(rate = total/population*10^5)
dat[which.min(dat$rate),]
dat
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |>
mutate(Race = if_else(is.na(Race1), "Other", Race1)) |>
mutate(Race = if_else(is.na(Race3), "Other", Race3))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat
make_date('2015','Jan',3)
make_date(2015,'Jan',3)
make_date(2015,match('Jan', month.abb) ,3)
make_date(2015,10 ,3)
mean(heights$height<72&heights$height>69)
#P(Cel<=1)
1-0.75*)>25^2-0.75^3
#P(Cel<=1)
1-0.75*0.25^2-0.75^3
#P(Cel<=1)
1-3*0.75*0.25^2-0.75^3
#P(Cel<=1)
1-3*0.75*0.25^2-0.25^3
cel_p <- 0.75
sample <- replicate(10^5, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
#P(Cel<=1)
3*0.75*0.25^2-0.25^3
cel_p <- 0.75
sample <- replicate(10^6, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
#P(Cel<=1)
3*0.75*0.25^2+0.25^3
p = 0.45
N =25
round(2*sqrt(p*(1-p)/N),2)
pi
x <- c("Maine", "Chicago")
x %in% state.name
state.name %in% x
x <- c("Maine", "Chicago")
x %in% state.name
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race1, Race3)
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
dat
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race1)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
as.tibble(c(year=1999,month='Jan',day=1))
as.tibble((year=1999,month='Jan',day=1))
as.tibble(year=1999,month='Jan',day=1)
tibble(year=1999,month='Jan',day=1)
tibble(year=1999,month='Jan',day=1) |> mutate(date = make_date(year,month,day))
tibble(year="1999",month='Jan',day=1) |> mutate(date = make_date(year,month,day))
tibble(year="1999",month='Jan',day=1) |> mutate(year = as.numeric(year),
month = match(month, month.abb),
date = make_date(year,month,day))
CO2
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$year[5]
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$year[[5]]
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$Year[[5]]
round(mean(heights$height<72&heights$height>69),3)
#P(Cel<=1)
round(3*0.75*0.25^2+0.25^3,2)
sqrt(6*e)
sqrt(6*exp(1))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
sum(is.na(dat$Race3))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
sum(is.na(dat$Race))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
dat$Race
heights |>
filter(sex == 'Male')
round(mean(heights$height<72&heights$height>69),3)
heights |>
filter(sex == 'Male') |>
mutate(hit = if_else(height>69&height<72,1,0)) |>
summarise(mean = mean(hit))
round(mean(heights$height<72&heights$height>69),3)
