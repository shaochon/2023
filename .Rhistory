<<<<<<< Updated upstream
mutate(AVG = H/AB) |>
filter(AB > 500) |>
ggplot(aes(AVG)) +
geom_histogram(color = "black", binwidth = .01) +
facet_wrap( ~ yearID)
batting_data <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500)
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
batting_data
filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(avg, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)/sqrt(leng())
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(avg, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(batting_data$AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE)/sqrt(n()) )
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE)/sqrt(n()) )
(0.45 - r$avg)/r$sd
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
r$avg
r$sd
Batting
r <- filter(Batting, yearID %in% 2010:2012) |>
mutate(AVG = H/AB) |>
filter(AB > 500) |>
summarise(avg = mean(AVG, na.rm = T),
sd = sd(AVG, na.rm = TRUE) )
(0.45 - r$avg)/r$sd
avg_mean <- mean(batting_data$AVG, na.rm = TRUE)
avg_sd <- sd(batting_data$AVG, na.rm = TRUE)
cat("Mean Batting Average (2010-2012):", round(avg_mean, 3), "\n")
cat("Standard Deviation of Batting Average (2010-2012):", round(avg_sd, 3), "\n")
sqrt(0.45*0.55/leng(20))
sqrt(0.45*0.55/length(20))
0.45*0.55/length(20)
0.45*0.55/20
sqrt(0.45*0.55/20)
mu = 0.275
xbar = 0.450
sigma = 0.111
tao = 0.027
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * mu  + (1 - B) * xbar
mu = 0.275
xbar = 0.450
sigma = 0.111
tao = 0.027
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * mu  + (1 - B) * xbar
estimated_mu
theta = 0.275
tao = 0.027
xbar = 0.450
sigma = 0.111
B = sigma^2 / (sigma^2 + tao^2)
estimated_mu = B * theta  + (1 - B) * xbar
estimated_mu
se_square = 1 / ((1 / (0.111)^2) + (1 / (0.027)^2))
se_square = 1 / ((1 / (0.111)^2) + (1 / (0.027)^2))
se_square
estimated_mu +(-1,1)*1.96*sqrt(se_square)
estimated_mu +c(-1,1)*1.96*sqrt(se_square)
estimated_mu +c(-1,1)*qt(0.975)*sqrt(se_square)
estimated_mu +c(-1,1)*qt(0.975,19)*sqrt(se_square)
qt(0.975,19)
qt(0.95,19)
qt(0.97%,19)
qt(0.975,19)
sqrt(se_square)
qt(0.975,19)*sqrt(se_square)
factor('a')=='a'
identical
qt(0.975,9)
pt(2.262,9)
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob))
set.seed(2023-10-1)
n <- 25
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
n <- 25
B <- 10^3
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
n <- seq(1, 50)
pr <- function(n){
replicate(B,{
bdays <- sample(1:365, size = n, replace = TRUE)
any(duplicated(bdays))
}) |> mean()
}
p <- sapply(n, pr)
plot(n, p)
epr <- function(n){
1 - prod(seq(365, 365 - n + 1)/365)
}
ep <- sapply(n, epr)
plot(n, p)
lines(n, ep, col = "red")
x <- sample(c(-1, 1), size = 1, prob = c(9/19, 10/19))
replicate(10, sample(c(-1, 1), size = 1, prob = c(9/19, 10/19)))
sample(c(-1, 1), size = 10, replace = TRUE, prob = c(9/19, 10/19))
x <- rbinom(10, 1, 10/19); x <- x*2 - 1
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
s <- sum(x)
s <- replicate(10^3,{
x <- sample(c(-1, 1), size = 1000, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
plot(table(s))
mean(s < 0)
x <- sample(c(-1, 1), size = 10^6, replace = TRUE, prob = c(9/19, 10/19))
mean(x)
sqrt(mean((x - mean(x))^2))
sd(x)
n <- 1000
mu <- 1/19
sigma <- 2*sqrt(9/19*10/19)
pnorm(-sqrt(n)*mu/sigma)
n <- ceiling((-sigma/mu*qnorm(0.01))^2)
## Hint: copy and paste one of the previous Monte Carlo simulations and change n
s <- replicate(10^3,{
x <- sample(c(-1, 1), size = n, replace = TRUE, prob = c(9/19, 10/19))
sum(x)
})
mean(s < 0)
s <- replicate(10^3,{
x <- sample(c(0, 1), size = 5*10^3, replace = TRUE,
prob = c(1 - 10^-6, 10^-6))
sum(x)
})
plot(table(s))
sapply(0:3, function(k) mean(s == k))
dpois(0:3, 0.5)
p <- 0.04 #default prob
s <- replicate(10^3,{
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1-p))
sum(x)
})
hist(s)
p <- 0.04 #default prob
s <- replicate(10^3,{
p <- 0.04 + runif(1, -0.02, 0.02)
x <- sample(c(-200000, 10000), size = 10000, replace = TRUE, prob = c(p, 1 - p))
sum(x)
})
hist(s)
n <- 10^3
b <- 10^3
nowins <- replicate(b, {
x <- sample(c(0, 1), size = 4, replace = TRUE, prob = c(0.6, 0.4))
sum(x) == 0
})
1 - mean(nowins)
samples <- replicate(10^3,{
c = 0
w = 1
while(c<4&w<4){
s <- sample(c(0,1),size=1,replace = T,prob = c(0.5,0.5))
if(s==0){
c=c+1
}else{
w=w+1
}
}
return
return(c==4)
})
mean(samples)
cavswins <- replicate(10^3, {
x <- sample(c(0, 1), size = 6, replace = TRUE, prob = c(0.5, 0.5))
sum(x) >= 4
})
mean(cavswins)
winprob <- function(p) {
nowins <- replicate(10^4, {
x <- sample(c(0, 1), size = 7, replace = TRUE, prob = c(p, 1 - p))
sum(x)>=4
})
mean(nowins)
}
p <- seq(0.5, 0.95, 0.025)
plot(p, sapply(p, winprob),ylab = 'winprob')
winprob <- function(n) {
nowins <- replicate(10^3, {
x <- sample(c(0, 1), size = n, replace = TRUE, prob = c(0.75, 0.25))
sum(x) >= ceiling(n/2)
})
mean(nowins)
}
n <- seq(1, 25, 2)
plot(n, sapply(n, winprob))
seq(1,100)
seq(5,0)
seq(5,10)
seq(5,10,2)
seq(5:10)
?what is margin of error, what is standard of error and how they relate to the standard deviation
?setNames
co2
?mutate
head(admissions)
dat |> pivot_wider(names_from = gender,values_from = admitted)
dat <- admissions |> select(-applicants)
dat |> pivot_wider(names_from = gender,values_from = admitted)
admissions |> pivot_longer(c(admitted,applicants))
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(c(gender,name))
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name)
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name) |>
pivot_wider(names_from = name, values_from = value)
admissions |> pivot_longer(c(admitted,applicants)) |>
unite(name,gender,name) |>
pivot_wider()
?anti_join
sample_proportion <- 0.450  # Batting average
sample_size <- 500          # Number of at-bats or tries
confidence_level <- 0.95   # Desired confidence level
z_score <- qnorm((1 + confidence_level) / 2)  # Z-score for the desired confidence
z_score
sd <- sqrt(sample_proportion*(1-sample_proportion)/20)
sd
lower_bound <- sample_proportion-z_score*sd
upper_bound <- sample_proportion+z_score*sd
c(lower_bound,upper_bound)
sqrt(0.45*0.55/20)
sqrt(6*sum(1/(1:10000)^2))
dat <- murders[murders$population > 10^7,]
dat[which.min(dat$rate),]
dat <- subset(murders, murders$population > 10^7)
murders[which.min(murders$rate), ]
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
dat|>
count(Race1, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
dat |>
count(Race, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
count(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = ifelse(is.na(Race), Race1, Race))
table(dat$Race)
dat$Race
?make_date
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(path)
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file(path,"carbon_emissions.csv "))
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv "))
heights
heights$height
heights$height<72&heights$height>69
mean(heights$height<72&heights$height>69)
murders |> ggplot(aes(population, total)) + geom_label()
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide
co2_wide <- data.frame(matrix(co2, ncol=12, byrow=TRUE)) |>
setNames(1:12) |>
mutate(year=as.character(1959:1997))
co2_wide |>
pivot_longer(1:12) |>
rename(month=name, co2=value)
cel_p <- 0.75
replicate(1000, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
cel_p <- 0.75
sample <- replicate(1000, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
mu  <- 3.5
sigma <- 1
xhat <- replicate(10^5,
{N <- 100
x <- rnorm(N, mu, sigma)
return(mean(x))})
mean(xhat)
sd(xhat)
p = 0.45
N =25
2*sqrt(p*(1-p)/N)
1/(1:5)^2
x <- c(“Maine”, “Chicago”, “Michigan”, “Montana”, “Dakota”)
x <- c("Maine", "Chicago")
x %in% state.name
dat <- murders[murders$population > 10^7,]
dat[which.min(dat$rate),]
dat <- murders[murders$population > 10^5,]
dat[which.min(dat$rate),]
dat
dat <- murders[murders$population > 10^5,] |> mutate(rate = total/population*10^5)
dat[which.min(dat$rate),]
dat
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |>
mutate(Race = if_else(is.na(Race1), "Other", Race1)) |>
mutate(Race = if_else(is.na(Race3), "Other", Race3))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat
make_date('2015','Jan',3)
make_date(2015,'Jan',3)
make_date(2015,match('Jan', month.abb) ,3)
make_date(2015,10 ,3)
mean(heights$height<72&heights$height>69)
#P(Cel<=1)
1-0.75*)>25^2-0.75^3
#P(Cel<=1)
1-0.75*0.25^2-0.75^3
#P(Cel<=1)
1-3*0.75*0.25^2-0.75^3
#P(Cel<=1)
1-3*0.75*0.25^2-0.25^3
cel_p <- 0.75
sample <- replicate(10^5, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
#P(Cel<=1)
3*0.75*0.25^2-0.25^3
cel_p <- 0.75
sample <- replicate(10^6, {
s <- sample(c(0,1),size = 3,replace=T,prob=c(0.75,0.25))
sum(s)>=2
})
mean(sample)
#P(Cel<=1)
3*0.75*0.25^2+0.25^3
p = 0.45
N =25
round(2*sqrt(p*(1-p)/N),2)
pi
x <- c("Maine", "Chicago")
x %in% state.name
state.name %in% x
x <- c("Maine", "Chicago")
x %in% state.name
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race1, Race3)
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race)) |>
count(Race, Race3)
dat
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |>
mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race1)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
as.tibble(c(year=1999,month='Jan',day=1))
as.tibble((year=1999,month='Jan',day=1))
as.tibble(year=1999,month='Jan',day=1)
tibble(year=1999,month='Jan',day=1)
tibble(year=1999,month='Jan',day=1) |> mutate(date = make_date(year,month,day))
tibble(year="1999",month='Jan',day=1) |> mutate(date = make_date(year,month,day))
tibble(year="1999",month='Jan',day=1) |> mutate(year = as.numeric(year),
month = match(month, month.abb),
date = make_date(year,month,day))
CO2
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$year[5]
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$year[[5]]
path <- system.file("extdata", package = "dslabs")
dat <- read_csv(file.path(path,"carbon_emissions.csv"))
dat$Year[[5]]
round(mean(heights$height<72&heights$height>69),3)
#P(Cel<=1)
round(3*0.75*0.25^2+0.25^3,2)
sqrt(6*e)
sqrt(6*exp(1))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race3)
sum(is.na(dat$Race3))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
sum(is.na(dat$Race))
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
table(dat$Race)
library(NHANES)
dat <- NHANES |> mutate(Race = Race3) |> mutate(Race = if_else(is.na(Race), Race1, Race))
dat$Race
heights |>
filter(sex == 'Male')
round(mean(heights$height<72&heights$height>69),3)
heights |>
filter(sex == 'Male') |>
mutate(hit = if_else(height>69&height<72,1,0)) |>
summarise(mean = mean(hit))
round(mean(heights$height<72&heights$height>69),3)
=======
library(nnet)
mod.age <- multinom(Y ~ age, data = framingham)
coef(mod.age)
# Relative Risk Ratios and 95% CIs: 2 versus 1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10); RRR.2v1
summary(mod.age)
# Relative Risk Ratios and 95% CIs: 2 versus 1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10); RRR.2v1
exp(log(RRR.2v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[1,2])
# Relative Risk Ratios and 95% CIs: 3 versus 1
RRR.3v1 <- exp(coef(mod.age)[2,2]*10)
RRR.3v1
exp(log(RRR.3v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[2,2])
# Relative Risk Ratios and 95% CIs: 3 versus 2
RRR.3v2 <- exp(coef(mod.age)[2, 2]*10 - coef(mod.age)[1, 2]*10)
RRR.3v2
exp(log(RRR.3v2) + c(-1, 1)*1.96*10*sqrt(vcov(mod.age)[2, 2] + vcov(mod.age)[4,4] -2*vcov(mod.age)[2,4]))
# Plotting the predicted probabilities
plot(mod.age$fitted.values[,1][order(framingham$age)] ~ sort(framingham$age), type="l", col="dodgerblue", xlab=c("Age"), ylab="Predicted Probability", ylim=c(0,1))
points(mod.age$fitted.values[,2][order(framingham$age)] ~ sort(framingham$age), type="l", col="magenta")
points(mod.age$fitted.values[,3][order(framingham$age)]~sort(framingham$age), type="l", col="green")
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8)
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green")
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"))
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"))
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8)
plot(mod.age$fitted.values[,1][order(framingham$age)] ~ sort(framingham$age), type="l", col="dodgerblue", xlab=c("Age"), ylab="Predicted Probability", ylim=c(0,1))
points(mod.age$fitted.values[,2][order(framingham$age)] ~ sort(framingham$age), type="l", col="magenta")
points(mod.age$fitted.values[,3][order(framingham$age)]~sort(framingham$age), type="l", col="green")
legend("topright", legend=c("Level 1", "Level 2", "Level 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8)
mod.age
mod.age$fitted.values
exp(log(RRR.2v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[1,2])
RRR.2v1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10)
# Relative Risk Ratios and 95% CIs: 2 versus 1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10); RRR.2v1
exp(log(RRR.2v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[1,2])
# Relative Risk Ratios and 95% CIs: 2 versus 1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10); RRR.2v1
exp(log(RRR.2v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[1,2])
summary(mod.age)$standard.errors[1,2]
# Relative Risk Ratios and 95% CIs: 3 versus 1
RRR.3v1 <- exp(coef(mod.age)[2,2]*10)
RRR.3v1
exp(log(RRR.3v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[2,2])
# Relative Risk Ratios and 95% CIs: 3 versus 2
RRR.3v2 <- exp(coef(mod.age)[2, 2]*10 - coef(mod.age)[1, 2]*10)
# Relative Risk Ratios and 95% CIs: 3 versus 2
RRR.3v2 <- exp(coef(mod.age)[2, 2]*10 - coef(mod.age)[1, 2]*10)
RRR.3v2
exp(log(RRR.3v2) + c(-1, 1)*1.96*10*sqrt(vcov(mod.age)[2, 2] + vcov(mod.age)[4,4] -2*vcov(mod.age)[2,4]))
# (B)
# Fitting the multinomial model
mod.sex <- multinom(Y ~ sex, data = framingham)
coef(mod.sex)
# Checking fitted probabilities
apply(cbind(mod.sex$fitted.values, framingham$sex), 2, unique) # model fit
prop.table(table(framingham$sex,framingham$Y), 1) # outcome x sex tabulation
# Checking RRR estimates
summary(mod.sex) # model estimates
exp(coef(mod.sex)[2,2] - coef(mod.sex)[1,2]) # model estimates (Level 3 vs. Level 2)
table(framingham$sex,framingham$Y) # results from tabulation
RRR.2 <- (239/1515)/(225/855)
RRR.2
RRR.3 <- (666/1515)/(740/855)
RRR.3
RRR.3v2 <- (666/239)/(740/225)
RRR.3v2
summ.MNfit(mod.sex)
print(round(results, digits=digits))}}
{
cat("\nLevel", fit$lev[i], "vs. Level", fit$lev[1], "\n")
betaHat <- s$coefficients[(i-1),]
se <- s$standard.errors[(i-1),]
zStat <- betaHat / se
pval <- 2 * pnorm(abs(zStat), lower.tail=FALSE)
RRR <- exp(betaHat)
RRR.lower <- exp(betaHat - qnorm(0.975)*se)
RRR.upper <- exp(betaHat + qnorm(0.975)*se)
results <- cbind(betaHat, se, pval, RRR, RRR.lower, RRR.upper)
print(round(results, digits=digits))
}}
{
cat("\nLevel", fit$lev[i], "vs. Level", fit$lev[1], "\n")
betaHat <- s$coefficients[(i-1),]
se <- s$standard.errors[(i-1),]
zStat <- betaHat / se
pval <- 2 * pnorm(abs(zStat), lower.tail=FALSE)
RRR <- exp(betaHat)
RRR.lower <- exp(betaHat - qnorm(0.975)*se)
RRR.upper <- exp(betaHat + qnorm(0.975)*se)
results <- cbind(betaHat, se, pval, RRR, RRR.lower, RRR.upper)
print(round(results, digits=digits)
}}
summ.MNfit <- function(fit, digits=3){
s <- summary(fit)
for(i in 2:length(fit$lev))
{
cat("\nLevel", fit$lev[i], "vs. Level", fit$lev[1], "\n")
betaHat <- s$coefficients[(i-1),]
se <- s$standard.errors[(i-1),]
zStat <- betaHat / se
pval <- 2 * pnorm(abs(zStat), lower.tail=FALSE)
RRR <- exp(betaHat)
RRR.lower <- exp(betaHat - qnorm(0.975)*se)
RRR.upper <- exp(betaHat + qnorm(0.975)*se)
results <- cbind(betaHat, se, pval, RRR, RRR.lower, RRR.upper)
print(round(results, digits=digits))
}
}
summ.MNfit(mod.sex)
table(framingham$sex,framingham$Y) # results from tabulation
RRR.2
RRR.3
# (C)
# Fitting the multinomial models
mod.agesex <- multinom(Y ~ sex + age, data = framingham)
summary(mod.agesex)
mod.interact <- multinom(Y ~ age + sex + age:sex, data = framingham)
summary(mod.interact)
# Performing the LRT
anova(mod.agesex, mod.interact, test="Chisq")
dat
framingham
head(framingham)
vif(framingham)
library(foreign)
vif(framingham)
# e)
# Get a sense of what these variable forms look like:
library(broom)
library(vip)
vif(framingham)
library(car)
vif(framingham)
library(glmnet)
vif(framingham)
head(framingham)
summary(framingham)
# Loading packages for ordinal regression
library(VGAM)
ord.age <- vglm(Y ~ age, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.sex <- vglm(Y ~ sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.agesex <- vglm(Y ~ age + sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.interact <- vglm(Y ~ age + sex + age*sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
# (A)
summary(ord.age)
age
table(framingham$age)
table(framingham$Y)
# Estimated OR and 95% CI: Outcome 3 vs. Outcomes 1 and 2
exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.age)[3,3]))
# Estimated OR and 95% CI: Outcomes 2 and 3 vs. Outcome 1
# Note that this is the same as what we found/did above due to our proportional odds assumption exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.age)[3,3]))
# (B)
# Creating an indicator reflecting whether a patient had Outcome 3
framingham$indicator3 <- ifelse(framingham$Y==3, 1, 0)
# Fitting a logistic regression with indicator3 as the outcome
mod.3v12 <- glm(indicator3 ~ age, family=binomial, data=framingham)
summary(mod.3v12)
# Creating an indicator reflecting whether a patient had Outcomes 2 or 3
framingham$indicator23 <- ifelse(framingham$Y==1, 0, 1)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ age, family=binomial, data=framingham)
summary(mod.32v1)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2])
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2])
coef(mod.3v12)
mod.3v12
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
coef(mod.3v12)[2] - coef(mod.32v1)[2]
# (C)
# Table for 1 vs. 2 and 3 (combined)
table(framingham$sex, framingham$indicator23)
# Hand-calculated odds ratio
OR.23v1 <- (855*905)/(965*1515)
OR.23v1
# Hand-calculated odds ratio
OR.23v1 <- (855*905)/(965*1515)
OR.23v1
# Table for 1 and 2 (combined) vs. 3
table(framingham$sex, framingham$indicator3)
# Hand-calculated odds ratio
OR.3v21 <- (1080*666)/(740*1754)
OR.3v21
# Odds ratios from our ordinal regression model
summary(ord.sex)
exp(coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3]))
# Odds ratios from our ordinal regression model
summary(ord.sex)
exp(coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3]))
coef(ord.sex)
exp(ord.sex)
laaply(ord.sex,exp)
lapply(ord.sex,exp)
exp(coef(ord.sex))
coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3])
exp(coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3])
exp(coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3]))
exp(coef(ord.sex)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.sex)[3,3]))
coef(ord.sex)
exp(coef(ord.sex))
exp(coef(ord.sex))[3]
exp(coef(ord.sex)[3] + c(-1, 1)*1.96*sqrt(vcov(ord.sex)[3,3]))
framingham$indicator3 <- ifelse(framingham$Y==3, 1, 0)
# Fitting a logistic regression with indicator3 as the outcome
mod.3v12 <- glm(indicator3 ~ sex, family=binomial, data=framingham)
summary(mod.3v12)
# Creating an indicator reflecting whether a patient had Outcomes 2 or 3
framingham$indicator23 <- ifelse(framingham$Y==1, 0, 1)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ sex, family=binomial, data=framingham)
summary(mod.32v1)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
# (D)
# Assessing significance of the interaction term
summary(ord.interact)
coef(ord.interact)
exp(coef(ord.interact)[4])
exp(coef(ord.interact)[4] + c(-1, 1)*1.96*sqrt(vcov(ord.interact)[4,4]))
# (E)
# Fitting a generalized ordinal model (without the proportional odds assumption)
mod.no.po <- vglm(Y ~ sex + age, cumulative(parallel=FALSE, reverse=T), data=framingham)
mod.no.po
# Conducting the likelihood ratio test
pchisq(deviance(ord.agesex) - deviance(mod.no.po), df=df.residual(ord.agesex)-df.residual(mod.no.po), lower.tail=F)
# Plotting the predicted probabilities
plot(mod.age$fitted.values[,1][order(framingham$age)] ~ sort(framingham$age), type="l", col="dodgerblue", xlab=c("Age"), ylab="Predicted Probability", ylim=c(0,1))
points(mod.age$fitted.values[,2][order(framingham$age)] ~ sort(framingham$age), type="l", col="magenta")
points(mod.age$fitted.values[,3][order(framingham$age)]~sort(framingham$age), type="l", col="green")
legend("topright", legend=c("Outcome 1", "Outcome 2", "Outcome 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8)
exp(coef(mod.3v12)[2])
exp(coef(mod.32v1)[2])
########################
## R code for HW6
########################
# Reading in the data
library(foreign)
framingham <- read.dta(file="~/Desktop/BST210/Homework/HW6/framingham.dta")
framingham <- framingham[which(framingham$prevchd!=1),]
# Creating the outcome variable
framingham$Y <- rep(1, nrow(framingham))
framingham$Y[which(framingham$death==1)] <- 3
framingham$Y[which(framingham$death==0 & framingham$anychd==1)] <- 2
# Recoding sex assigned at birth to be female=1, male=0
framingham$sex <- framingham$sex-1
################
# Q1 OPTIONAL
mod.glm=glm(death~sex+age,family=binomial(),data=framingham)
# Diagnostics:
# (A)
library(car)
par(mfrow=c(1,2))
vif(mod.glm)
hist(mod.glm$fitted, main="p-hats")
hist(hatvalues(mod.glm),main="hat-values")
influencePlot(mod.glm,col="red")
influenceIndexPlot(mod.glm, col="blue")
framingham[c("3647","3867","1694","3274"),]
hist(framingham$age)
hist(framingham$sex)
hist(framingham$death)
outlierTest(mod.glm)
# GOF:
# (B)
# Calibration
library(ResourceSelection)
options(digits=7)
# Hosmer-Lemeshow Test
hoslem.test(mod.glm$y,fitted(mod.glm),g=5)
# (C)
# Discrimination
library(survival)
concordance(mod.glm)
library(pROC)
predprob <- predict(mod.glm,type=c("response"))
roccurve <- roc(death ~ predprob, data=framingham)
plot(roccurve,col="red")
auc(roccurve)
# (D)
# Consider other models and perform diagnostics and GOF on them
mod.glm=glm(death~sex+age+sex*age,family=binomial(),data=framingham)
summary(mod.glm)
################
# Q2
# (A)
# Fitting the multinomial model
library(nnet)
mod.age <- multinom(Y ~ age, data = framingham)
coef(mod.age)
# Relative Risk Ratios and 95% CIs: 2 versus 1
RRR.2v1 <- exp(coef(mod.age)[1,2]*10); RRR.2v1
exp(log(RRR.2v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[1,2])
# Relative Risk Ratios and 95% CIs: 3 versus 1
RRR.3v1 <- exp(coef(mod.age)[2,2]*10)
RRR.3v1
exp(log(RRR.3v1) + c(-1, 1)*1.96*10*summary(mod.age)$standard.errors[2,2])
# Relative Risk Ratios and 95% CIs: 3 versus 2
RRR.3v2 <- exp(coef(mod.age)[2, 2]*10 - coef(mod.age)[1, 2]*10)
RRR.3v2
exp(log(RRR.3v2) + c(-1, 1)*1.96*10*sqrt(vcov(mod.age)[2, 2] + vcov(mod.age)[4,4] -2*vcov(mod.age)[2,4]))
# Plotting the predicted probabilities
plot(mod.age$fitted.values[,1][order(framingham$age)] ~ sort(framingham$age), type="l", col="dodgerblue", xlab=c("Age"), ylab="Predicted Probability", ylim=c(0,1))
points(mod.age$fitted.values[,2][order(framingham$age)] ~ sort(framingham$age), type="l", col="magenta")
points(mod.age$fitted.values[,3][order(framingham$age)]~sort(framingham$age), type="l", col="green")
legend("topright", legend=c("Outcome 1", "Outcome 2", "Outcome 3"), col=c("dodgerblue", "magenta", "green"), lty=1, cex=0.8)
# (B)
# Fitting the multinomial model
mod.sex <- multinom(Y ~ sex, data = framingham)
coef(mod.sex)
# Checking fitted probabilities
apply(cbind(mod.sex$fitted.values, framingham$sex), 2, unique) # model fit
prop.table(table(framingham$sex,framingham$Y), 1) # outcome x sex tabulation
# Checking RRR estimates
summary(mod.sex) # model estimates
exp(coef(mod.sex)[2,2] - coef(mod.sex)[1,2]) # model estimates (Level 3 vs. Level 2)
table(framingham$sex,framingham$Y) # results from tabulation
RRR.2 <- (239/1515)/(225/855)
RRR.2
RRR.3 <- (666/1515)/(740/855)
RRR.3
RRR.3v2 <- (666/239)/(740/225)
RRR.3v2
summ.MNfit <- function(fit, digits=3){
s <- summary(fit)
for(i in 2:length(fit$lev))
{
cat("\nLevel", fit$lev[i], "vs. Level", fit$lev[1], "\n")
betaHat <- s$coefficients[(i-1),]
se <- s$standard.errors[(i-1),]
zStat <- betaHat / se
pval <- 2 * pnorm(abs(zStat), lower.tail=FALSE)
RRR <- exp(betaHat)
RRR.lower <- exp(betaHat - qnorm(0.975)*se)
RRR.upper <- exp(betaHat + qnorm(0.975)*se)
results <- cbind(betaHat, se, pval, RRR, RRR.lower, RRR.upper)
print(round(results, digits=digits))
}
}
summ.MNfit(mod.sex)
# Tabulation RRRs
table(dat$female,dat$outcome)
# Tabulation RRRs
table(framingham$female,framingham$outcome)
# (C)
# Fitting the multinomial models
mod.agesex <- multinom(Y ~ sex + age, data = framingham)
summary(mod.agesex)
mod.interact <- multinom(Y ~ age + sex + age:sex, data = framingham)
summary(mod.interact)
# Performing the LRT
anova(mod.agesex, mod.interact, test="Chisq")
# Loading packages for ordinal regression
library(VGAM)
ord.age <- vglm(Y ~ age, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.sex <- vglm(Y ~ sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.agesex <- vglm(Y ~ age + sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
ord.interact <- vglm(Y ~ age + sex + age*sex, cumulative(parallel=TRUE, reverse=TRUE), data=framingham)
# (A)
summary(ord.age)
# Estimated OR and 95% CI: Outcome 3 vs. Outcomes 1 and 2
exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.age)[3,3]))
# Estimated OR and 95% CI: Outcomes 2 and 3 vs. Outcome 1
# Note that this is the same as what we found/did above due to our proportional odds assumption exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10)
exp(coef(ord.age)[3]*10 + c(-1, 1)*1.96*10*sqrt(vcov(ord.age)[3,3]))
# (B)
# Creating an indicator reflecting whether a patient had Outcome 3
framingham$indicator3 <- ifelse(framingham$Y==3, 1, 0)
# Fitting a logistic regression with indicator3 as the outcome
mod.3v12 <- glm(indicator3 ~ age, family=binomial, data=framingham)
summary(mod.3v12)
# Creating an indicator reflecting whether a patient had Outcomes 2 or 3
framingham$indicator23 <- ifelse(framingham$Y==1, 0, 1)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ age, family=binomial, data=framingham)
summary(mod.32v1)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);
exp(coef(mod.3v12)[2])
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);
exp(coef(mod.32v1)[2])
exp(coef(mod.3v12)[2]) - exp(coef(mod.32v1)[2])
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
exp(coef(mod.3v12)[2])
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
exp(coef(mod.32v1)[2])
# Table for 1 vs. 2 and 3 (combined)
table(framingham$sex, framingham$indicator23)
# Hand-calculated odds ratio
OR.23v1 <- (855*905)/(965*1515)
OR.23v1
# Table for 1 and 2 (combined) vs. 3
table(framingham$sex, framingham$indicator3)
# Hand-calculated odds ratio
OR.3v21 <- (1080*666)/(740*1754)
OR.3v21
# Odds ratios from our ordinal regression model
summary(ord.sex)
exp(coef(ord.sex))
exp(coef(ord.sex)[3] + c(-1, 1)*1.96*sqrt(vcov(ord.sex)[3,3]))
## add logistic regression on both category
# Creating an indicator reflecting whether a patient had Outcome 3
framingham$indicator3 <- ifelse(framingham$Y==3, 1, 0)
# Fitting a logistic regression with indicator3 as the outcome
mod.3v12 <- glm(indicator3 ~ sex, family=binomial, data=framingham)
summary(mod.3v12)
# Creating an indicator reflecting whether a patient had Outcomes 2 or 3
framingham$indicator23 <- ifelse(framingham$Y==1, 0, 1)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ sex, family=binomial, data=framingham)
summary(mod.32v1)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
# (C)
fit.npo = vglm(indicator3 ~ age,
cumulative(parallel=FALSE, reverse=T), data=dat)
summary(fit.npo)
# (C)
fit.npo = vglm(indicator3 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
summary(fit.npo)
# (C)
fit.npo = vglm(indicator23 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
summary(fit.npo)
fit.npo23 = vglm(indicator23 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
fit.po23 = vglm(indicator23 ~ age,
cumulative(parallel=TRUE, reverse=T), data=framingham)
fit.npo3 = vglm(indicator3 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
fit.po3 = vglm(indicator23 ~ age,
cumulative(parallel=TRUE, reverse=T), data=framingham)
pchisq(deviance(fit.po23)-deviance(fit.npo23),
df=df.residual(fit.po23)-df.residual(fit.npo23),lower.tail=F)
pchisq(deviance(fit.po3)-deviance(fit.npo3),
df=df.residual(fit.po3)-df.residual(fit.npo3),lower.tail=F)
fit.npo3 = vglm(indicator3 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
fit.po3 = vglm(indicator23 ~ age,
cumulative(parallel=TRUE, reverse=T), data=framingham)
pchisq(deviance(fit.po3)-deviance(fit.npo3),
df=df.residual(fit.po3)-df.residual(fit.npo3),lower.tail=F)
fit.po3 = vglm(indicator3 ~ age,
cumulative(parallel=TRUE, reverse=T), data=framingham)
pchisq(deviance(fit.po3)-deviance(fit.npo3),
df=df.residual(fit.po3)-df.residual(fit.npo3),lower.tail=F)
fit.npo23 = vglm(indicator23 ~ age,
cumulative(parallel=FALSE, reverse=T), data=framingham)
fit.po23 = vglm(indicator23 ~ age,
cumulative(parallel=TRUE, reverse=T), data=framingham)
pchisq(deviance(fit.po23)-deviance(fit.npo23),
df=df.residual(fit.po23)-df.residual(fit.npo23),lower.tail=F)
mod.3v12 <- glm(indicator3 ~ female, family=binomial, data=framingham)
mod.3v12 <- glm(indicator3 ~ sex, family=binomial, data=framingham)
summary(mod.3v12)
# Creating an indicator reflecting whether a patient had Outcomes 2 or 3
framingham$indicator23 <- ifelse(framingham$Y==1, 0, 1)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ sex, family=binomial, data=framingham)
summary(mod.32v1)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
exp(coef(mod.3v12)[2])
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
exp(coef(mod.32v1)[2])
exp(coef(mod.3v12)[2]) - exp(coef(mod.32v1)[2])
# (C)
glm(indicator23 ~ age, family=binomial, data=framingham)
# (C)
fit.npo23 = vglm(Y ~ age,
cumulative(parallel=T, reverse=T), data=framingham)
summary(fit.npo23)
# (C)
fit.npo23 = vglm(Y ~ sex,
cumulative(parallel=T, reverse=T), data=framingham)
summary(fit.npo23)
# Odds ratios from our ordinal regression model
summary(ord.sex)
exp(coef(ord.sex))
## add logistic regression on both category
mod.3v12 <- glm(indicator3 ~ sex, family=binomial, data=framingham)
## add logistic regression on both category
mod.3v12 <- glm(indicator3 ~ sex, family=binomial, data=framingham)
# Fitting a logistic regression with indicator23 as the outcome
mod.32v1 <- glm(indicator23 ~ sex, family=binomial, data=framingham)
# Examining the 95% CIs for our two coefficients
coef(mod.3v12)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.3v12)[2,2]);coef(mod.3v12)[2]
exp(coef(mod.3v12)[2])
coef(mod.32v1)[2] + c(-1, 1)*1.96*sqrt(vcov(mod.32v1)[2,2]);coef(mod.32v1)[2]
exp(coef(mod.32v1)[2])
exp(coef(mod.3v12)[2]) - exp(coef(mod.32v1)[2])
coef(mod.sex)
setwd("~/Desktop/BST262/Module1")
package.skeleton("powermethod",code_files="powermethod.r")
roxygen2::roxygenise(load_code="source")
setwd("~/Desktop/BST262/Module1/powermethod")
roxygen2::roxygenise(load_code="source")
representation(data='environment')
>>>>>>> Stashed changes
